#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Tue Aug 12 22:25:19 2014
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade
import matplotlib
matplotlib.use('WXAgg')
import matplotlib.pylab as p
from mpl_toolkits.mplot3d import Axes3D
from PyQuante.Molecule import Molecule
from PyQuante.hartree_fock import rhf
from PyQuante.Ints import getbasis
import numpy as np
import math
from visual import *
# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.atom_no = 1;
        self.bfs_len = 2;
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.Mol_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("Molecule"))
        self.H2 = wx.RadioButton(self.panel_1, wx.ID_ANY, _("H2"))
        self.Coor1_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("Coordinates1(x,y,z)"))
        self.coor1_x = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.coor1_y = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.coor1_z = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.Coor2_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("Coordinates2(x,y,z)"))
        self.coor2_x = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.coor2_y = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.coor2_z = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.Bf_label = wx.StaticText(self.panel_1, wx.ID_ANY, _("Basis Function"))
        self.Bf_box = wx.ComboBox(self.panel_1, wx.ID_ANY, "sto-3g",choices=[("sto-3g"), ("6-31g"), ("3-21g"),("6-31g**"),("6-31g**++"),("6-311g**"),("sto-6g"),("lacvp"),("cc-pvdz"),("cc-pvtz"),("dzvp"),("6-311g++(2d,2p)"),("6-311g++(3d,3p)"),("6-311g++(3df,3pd)")], style=wx.CB_DROPDOWN)
        self.default_bt = wx.Button(self.panel_1, wx.ID_ANY, _("Set Default"))
        self.reset_bt = wx.Button(self.panel_1, wx.ID_ANY, _("Reset"))
        self.visual_bt = wx.Button(self.panel_1, wx.ID_ANY, _("Visualize"))
        self.console_box = wx.TextCtrl(self, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.Default, self.default_bt)
        self.Bind(wx.EVT_BUTTON, self.Reset, self.reset_bt)
        self.Bind(wx.EVT_BUTTON, self.Visualize, self.visual_bt)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Molecule Visualize"))
        self.coor1_x.SetMinSize((140, 27))
        self.coor1_y.SetMinSize((140, 27))
        self.coor1_z.SetMinSize((140, 27))
        self.coor2_x.SetMinSize((140, 27))
        self.coor2_y.SetMinSize((140, 27))
        self.coor2_z.SetMinSize((140, 27))
        self.Bf_box.SetSelection(-1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(6, 4, 0, 0)
        grid_sizer_1.Add(self.Mol_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.H2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.Coor1_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.coor1_x, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.coor1_y, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.coor1_z, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.Coor2_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.coor2_x, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.coor2_y, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.coor2_z, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.Bf_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.Bf_box, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.default_bt, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.reset_bt, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.visual_bt, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.panel_1.SetSizer(grid_sizer_1)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_1.Add(self.console_box, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def Default(self, event):  # wxGlade: MyFrame.<event_handler>
        print "Event handler 'Default' not implemented!"
        self.coor1_x.SetValue("0.00000000")
        self.coor1_y.SetValue("0.00000000")
        self.coor1_z.SetValue("0.36628549")
        self.coor2_x.SetValue("0.00000000")
        self.coor2_y.SetValue("0.00000000")
        self.coor2_z.SetValue("-0.36628549")
        event.Skip()

    def Reset(self, event):  # wxGlade: MyFrame.<event_handler>
        print "Event handler 'Reset' not implemented!"
        self.coor1_x.SetValue("0.00000000")
        self.coor1_y.SetValue("0.00000000")
        self.coor1_z.SetValue("0.00000000")
        self.coor2_x.SetValue("0.00000000")
        self.coor2_y.SetValue("0.00000000")
        self.coor2_z.SetValue("0.00000000")
        self.Bf_box.SetValue("sto-3g")
        event.Skip()

    def Visualize(self, event):  # wxGlade: MyFrame.<event_handler>
        print "Event handler 'Visualize' not implemented!"
        x_1 = float(self.coor1_x.GetValue())
        y_1 = float(self.coor1_y.GetValue())
        z_1 = float(self.coor1_z.GetValue())
        x_2 = float(self.coor2_x.GetValue())
        y_2 = float(self.coor2_y.GetValue())
        z_2 = float(self.coor2_z.GetValue())
        mol = Molecule('he2',[(self.atom_no,(x_1,y_1,z_1)),
                             (self.atom_no,(x_2,y_2,z_2))],
                       units='Angstrom')
        bf_name = self.Bf_box.GetValue()

        #Why?
        if bf_name == "sto-3g":
            bf_name = "sto-3g"
        elif bf_name == "6-31g":
            bf_name = "6-31g"
        elif bf_name == "3-21g":
            bf_name = "3-21g"
        elif bf_name == "6-31g**":
            bf_name = "6-31g**"
        elif bf_name == "6-31g**++":
            bf_name = "6-31g**++"
        elif bf_name == "6-311g**":
            bf_name = "6-311g**"
        elif bf_name == "6-311g++(2d,2p)":
            bf_name = "6-311g++(2d,2p)"
        elif bf_name == "6-311g++(3d,3p)":
            bf_name = "6-311g++(3d,3p)"
        elif bf_name == "6-311g++(3df,3pd)":
            bf_name = "6-311g++(3df,3pd)"
        elif bf_name == "sto-6g":
            bf_name = "sto-6g"
        elif bf_name == "lacvp":
            bf_name = "lacvp"
        elif bf_name == "cc-pvdz":
            bf_name = "cc-pvdz"
        elif bf_name == "cc-pvtz":
            bf_name = "cc-pvtz"
        elif bf_name == "dzvp":
            bf_name = "dzvp"


        en,orbe,orbs = rhf(mol,basis_data=bf_name)
        self.console_box.SetValue('energy=%f' % en)

        bfs = getbasis(mol,bf_name)

        delta = 0.1
        c_range = 5.0
#setting for visualize
        x = np.arange(-1*c_range,c_range,delta)
        y = np.arange(-1*c_range,c_range,delta)
        X,Y = p.meshgrid(x,y)
        Z = np.zeros((len(X),len(Y)))
        Z_2 = np.zeros((len(X),len(Y)))
        
#print C matrix
#print "C=",orbs
        
#calculate wave function
        for k,bf in enumerate(bfs.bfs):
            for i,x1 in enumerate(x):
                for j,y1 in enumerate(y):
            #calculate wave function
            #basic function multiply
                    #if k==1:
                    Z[i,j] += bf.amp(x1,y1,0.0) * orbs[k,0]
                    
#####  visualize #####
        fig = p.figure()
        ax = Axes3D(fig)
        ax.plot_surface(X,Y,Z)
        ax.plot_wireframe(X,Y,Z,color = 'r')
        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')
        p.show()
        event.Skip()

# end of class MyFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    MoleculeVisualize = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(MoleculeVisualize)
    MoleculeVisualize.Show()
    app.MainLoop()
